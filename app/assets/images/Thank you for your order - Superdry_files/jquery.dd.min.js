var msBeautify = msBeautify || {};
(function($) {
    function dd(element, settings) {
        var settings = $.extend(true, {
            byJson: {
                data: null,
                selectedIndex: 0,
                name: null,
                size: 0,
                multiple: false,
                width: 250
            },
            mainCSS: "dd",
            height: 120,
            visibleRows: 7,
            rowHeight: 0,
            showIcon: true,
            zIndex: 9999,
            useSprite: false,
            animStyle: "slideDown",
            event: "click",
            openDirection: "auto",
            jsonTitle: true,
            style: "",
            direction: "absolute",
            disabledOpacity: .7,
            disabledOptionEvents: true,
            childWidth: 0,
            enableCheckbox: false,
            checkboxNameSuffix: "_mscheck",
            append: "",
            prepend: "",
            reverseMode: true,
            roundedCorner: true,
            enableAutoFilter: true,
            on: {
                create: null,
                open: null,
                close: null,
                add: null,
                remove: null,
                change: null,
                blur: null,
                click: null,
                dblclick: null,
                mousemove: null,
                mouseover: null,
                mouseout: null,
                focus: null,
                mousedown: null,
                mouseup: null
            }
        }, settings);
        var $this = this;
        var holderId = {
            postElementHolder: "_msddHolder",
            postID: "_msdd",
            postTitleID: "_title",
            postTitleTextID: "_titleText",
            postChildID: "_child"
        };
        var css = {
            dd: settings.mainCSS,
            ddTitle: "ddTitle",
            arrow: "arrow arrowoff",
            ddChild: "ddChild",
            ddTitleText: "ddTitleText",
            disabled: "disabled",
            enabled: "enabled",
            ddOutOfVision: "ddOutOfVision",
            borderTop: "borderTop",
            noBorderTop: "noBorderTop",
            selected: "selected",
            divider: "divider",
            optgroup: "optgroup",
            optgroupTitle: "optgroupTitle",
            description: "description",
            label: "ddlabel",
            hover: "hover",
            disabledAll: "disabledAll"
        };
        var css_i = {
            li: "_msddli_",
            borderRadiusTp: "borderRadiusTp",
            ddChildMore: "border shadow",
            fnone: "fnone"
        };
        var isList = false,
            isMultiple = false,
            isDisabled = false,
            cacheElement = {},
            element, orginial = {},
            isOpen = false;
        var DOWN_ARROW = 40,
            UP_ARROW = 38,
            LEFT_ARROW = 37,
            RIGHT_ARROW = 39,
            ESCAPE = 27,
            ENTER = 13,
            ALPHABETS_START = 47,
            SHIFT = 16,
            CONTROL = 17,
            BACKSPACE = 8,
            DELETE = 46;
        var shiftHolded = false,
            controlHolded = false,
            lastTarget = null,
            forcedTrigger = false,
            oldSelected, isCreated = false;
        var doc = document,
            ua = window.navigator.userAgent,
            isIE = ua.match(/msie/i);
        settings.reverseMode = settings.reverseMode.toString();
        settings.roundedCorner = settings.roundedCorner.toString();
        var msieversion = function() {
            var e = ua.indexOf("MSIE");
            if (e > 0) {
                return parseInt(ua.substring(e + 5, ua.indexOf(".", e)))
            } else {
                return 0
            }
        };
        var checkDataSetting = function() {
            settings.mainCSS = $("#" + element).data("maincss") || settings.mainCSS;
            settings.visibleRows = $("#" + element).data("visiblerows") || settings.visibleRows;
            if ($("#" + element).data("showicon") == false) {
                settings.showIcon = $("#" + element).data("showicon")
            }
            settings.useSprite = $("#" + element).data("usesprite") || settings.useSprite;
            settings.animStyle = $("#" + element).data("animstyle") || settings.animStyle;
            settings.event = $("#" + element).data("event") || settings.event;
            settings.openDirection = $("#" + element).data("opendirection") || settings.openDirection;
            settings.jsonTitle = $("#" + element).data("jsontitle") || settings.jsonTitle;
            settings.disabledOpacity = $("#" + element).data("disabledopacity") || settings.disabledOpacity;
            settings.childWidth = $("#" + element).data("childwidth") || settings.childWidth;
            settings.enableCheckbox = $("#" + element).data("enablecheckbox") || settings.enableCheckbox;
            settings.checkboxNameSuffix = $("#" + element).data("checkboxnamesuffix") || settings.checkboxNameSuffix;
            settings.append = $("#" + element).data("append") || settings.append;
            settings.prepend = $("#" + element).data("prepend") || settings.prepend;
            settings.reverseMode = $("#" + element).data("reversemode") || settings.reverseMode;
            settings.roundedCorner = $("#" + element).data("roundedcorner") || settings.roundedCorner;
            settings.enableAutoFilter = $("#" + element).data("enableautofilter") || settings.enableAutoFilter;
            settings.reverseMode = settings.reverseMode.toString();
            settings.roundedCorner = settings.roundedCorner.toString();
            settings.enableAutoFilter = settings.enableAutoFilter.toString()
        };
        var getElement = function(e) {
            if (cacheElement[e] === undefined) {
                cacheElement[e] = doc.getElementById(e)
            }
            return cacheElement[e]
        };
        var getIndex = function(e) {
            var t = getPostID("postChildID");
            return $("#" + t + " li." + css_i.li).index(e)
        };
        var createByJson = function() {
            if (settings.byJson.data) {
                var validData = ["description", "image", "title"];
                try {
                    if (!element.id) {
                        element.id = "dropdown" + msBeautify.counter
                    }
                    settings.byJson.data = eval(settings.byJson.data);
                    var id = "msdropdown" + msBeautify.counter++;
                    var obj = {};
                    obj.id = id;
                    obj.name = settings.byJson.name || element.id;
                    if (settings.byJson.size > 0) {
                        obj.size = settings.byJson.size
                    }
                    obj.multiple = settings.byJson.multiple;
                    var oSelect = createElement("select", obj);
                    for (var i = 0; i < settings.byJson.data.length; i++) {
                        var current = settings.byJson.data[i];
                        var opt = new Option(current.text, current.value);
                        for (var p in current) {
                            if (p.toLowerCase() != "text") {
                                var key = $.inArray(p.toLowerCase(), validData) != -1 ? "data-" : "";
                                opt.setAttribute(key + p, current[p])
                            }
                        }
                        oSelect.options[i] = opt
                    }
                    getElement(element.id).appendChild(oSelect);
                    oSelect.selectedIndex = settings.byJson.selectedIndex;
                    $(oSelect).css({
                        width: settings.byJson.width + "px"
                    });
                    element = oSelect
                } catch (e) {
                    throw "There is an error in json data."
                }
            }
        };
        var init = function() {
            createByJson();
            if (!element.id) {
                element.id = "msdrpdd" + msBeautify.counter++
            }
            element = element.id;
            $this.element = element;
            checkDataSetting();
            isDisabled = getElement(element).disabled;
            var e = settings.enableCheckbox;
            if (e.toString() === "true") {
                getElement(element).multiple = true;
                settings.enableCheckbox = true
            }
            isList = getElement(element).size > 1 || getElement(element).multiple == true ? true : false;
            if (isList) {
                isMultiple = getElement(element).multiple
            }
            mergeAllProp();
            createLayout();
            updateProp("uiData", getDataAndUI());
            updateProp("selectedOptions", $("#" + element + " option:selected"));
            var t = getPostID("postChildID");
            oldSelected = $("#" + t + " li." + css.selected);
            if (settings.reverseMode === "true") {
                $("#" + element).on("change", function() {
                    setValue(this.selectedIndex)
                })
            }
            getElement(element).refresh = function(e) {
                $("#" + element).msDropdown().data("dd").refresh()
            }
        };
        var getPostID = function(e) {
            return element + holderId[e]
        };
        var getInternalStyle = function(e) {
            var t = e.style === undefined ? "" : e.style.cssText;
            return t
        };
        var parseOption = function(opt) {
            var imagePath = "",
                title = "",
                description = "",
                value = -1,
                text = "",
                className = "",
                imagecss = "";
            if (opt !== undefined) {
                var attrTitle = opt.title || "";
                if (attrTitle != "") {
                    var reg = /^\{.*\}$/;
                    var isJson = reg.test(attrTitle);
                    if (isJson && settings.jsonTitle) {
                        var obj = eval("[" + attrTitle + "]")
                    }
                    title = isJson && settings.jsonTitle ? obj[0].title : title;
                    description = isJson && settings.jsonTitle ? obj[0].description : description;
                    imagePath = isJson && settings.jsonTitle ? obj[0].image : attrTitle;
                    imagecss = isJson && settings.jsonTitle ? obj[0].imagecss : imagecss
                }
                text = opt.text || "";
                value = opt.value || "";
                className = opt.className || "";
                title = $(opt).prop("data-title") || $(opt).data("title") || title || "";
                description = $(opt).prop("data-description") || $(opt).data("description") || description || "";
                imagePath = $(opt).prop("data-image") || $(opt).data("image") || imagePath || "";
                imagecss = $(opt).prop("data-imagecss") || $(opt).data("imagecss") || imagecss || ""
            }
            var o = {
                image: imagePath,
                title: title,
                description: description,
                value: value,
                text: text,
                className: className,
                imagecss: imagecss
            };
            return o
        };
        var createElement = function(e, t, n) {
            var r = doc.createElement(e);
            if (t) {
                for (var i in t) {
                    switch (i) {
                        case "style":
                            r.style.cssText = t[i];
                            break;
                        default:
                            r[i] = t[i];
                            break
                    }
                }
            }
            if (n) {
                r.innerHTML = n
            }
            return r
        };
        var hideOriginal = function() {
            var e = getPostID("postElementHolder");
            if ($("#" + e).length == 0) {
                var t = {
                    style: "height: 0px;overflow: hidden;position: absolute;",
                    className: css.ddOutOfVision
                };
                t.id = e;
                var n = createElement("div", t);
                $("#" + element).after(n);
                $("#" + element).appendTo($("#" + e))
            } else {
                $("#" + e).css({
                    height: 0,
                    overflow: "hidden",
                    position: "absolute"
                })
            }
            getElement(element).tabIndex = -1
        };
        var createWrapper = function() {
            var e = settings.roundedCorner == "true" ? " borderRadius" : "";
            var t = {
                className: css.dd + " ddcommon" + e
            };
            var n = getInternalStyle(getElement(element));
            var r = $("#" + element).outerWidth();
            t.style = "width: " + r + "px;";
            if (n.length > 0) {
                t.style = t.style + "" + n
            }
            t.id = getPostID("postID");
            t.tabIndex = getElement(element).tabIndex;
            var i = createElement("div", t);
            return i
        };
        var createTitle = function() {
            var e;
            if (getElement(element).selectedIndex >= 0) {
                e = getElement(element).options[getElement(element).selectedIndex]
            } else {
                e = {
                    value: "",
                    text: ""
                }
            }
            var t = "",
                n = "";
            var r = $("#" + element).data("usesprite");
            if (r) {
                settings.useSprite = r
            }
            if (settings.useSprite != false) {
                t = " " + settings.useSprite;
                n = " " + e.className
            }
            var i = settings.roundedCorner == "true" ? " " + css_i.borderRadiusTp : "";
            var s = createElement("div", {
                className: css.ddTitle + t + i
            });
            var o = createElement("span", {
                className: css.divider
            });
            var u = createElement("span", {
                className: css.arrow
            });
            var a = getPostID("postTitleID");
            var f = createElement("span", {
                className: css.ddTitleText + n,
                id: a
            });
            var l = parseOption(e);
            var c = l.image;
            var h = l.text || "";
            if (c != "" && settings.showIcon) {
                var p = createElement("img");
                if (l.imagecss != "") {
                    p.className = l.imagecss + " "
                }
            }
            var d = createElement("span", {
                className: css.label
            }, h);
            s.appendChild(o);
            s.appendChild(u);
            if (p) {
                f.appendChild(p)
            }
            f.appendChild(d);
            s.appendChild(f);
            var v = createElement("span", {
                className: css.description
            }, l.description);
            f.appendChild(v);
            return s
        };
        var createFilterBox = function() {
            var e = getPostID("postTitleTextID");
            var t = settings.roundedCorner == "true" ? "borderRadius" : "";
            var n = createElement("input", {
                id: e,
                type: "text",
                value: "",
                autocomplete: "off",
                className: "text shadow " + t,
                style: "display: none"
            });
            return n
        };
        var createChild = function(e) {
            var t = {};
            var n = getInternalStyle(e);
            if (n.length > 0) {
                t.style = n
            }
            var r = e.disabled ? css.disabled : css.enabled;
            r = e.selected ? r + " " + css.selected : r;
            r = r + " " + css_i.li;
            t.className = r;
            if (settings.useSprite != false) {
                t.className = r + " " + e.className
            }
            var i = createElement("li", t);
            var s = parseOption(e);
            if (s.title != "") {
                i.title = s.title
            }
            var o = s.image;
            if (o != "" && settings.showIcon) {
                var u = createElement("img");
                u.className = s.className + " ";
                if (s.imagecss != "") {
                    u.className = s.imagecss + " "
                }
            }
            if (s.description != "") {
                var a = createElement("span", {
                    className: css.description
                }, s.description)
            }
            var f = e.text || "";
            var l = createElement("span", {
                className: css.label
            }, f);
            if (settings.enableCheckbox === true) {
                var c = createElement("input", {
                    type: "checkbox",
                    name: element + settings.checkboxNameSuffix + "[]",
                    value: e.value || ""
                });
                i.appendChild(c);
                if (settings.enableCheckbox === true) {
                    c.checked = e.selected ? true : false
                }
            }
            if (u) {
                i.appendChild(u)
            }
            i.appendChild(l);
            if (a) {
                i.appendChild(a)
            } else {
                if (u) {
                    u.className = u.className + css_i.fnone
                }
            }
            var h = createElement("div", {
                className: "clear"
            });
            i.appendChild(h);
            return i
        };
        var createChildren = function() {
            var e = getPostID("postChildID");
            var t = {
                className: css.ddChild + " ddchild_ " + css_i.ddChildMore,
                id: e
            };
            if (isList == false) {
                t.style = "z-index: " + settings.zIndex
            } else {
                t.style = "z-index:1"
            }
            var n = $("#" + element).data("childwidth") || settings.childWidth;
            if (n) {
                t.style = (t.style || "") + ";width:" + n
            }
            var r = createElement("div", t);
            var i = createElement("ul");
            if (settings.useSprite != false) {
                i.className = settings.useSprite
            }
            var s = getElement(element).children;
            for (var o = 0; o < s.length; o++) {
                var u = s[o];
                var a;
                if (u.nodeName.toLowerCase() == "optgroup") {
                    a = createElement("li", {
                        className: css.optgroup
                    });
                    var f = createElement("span", {
                        className: css.optgroupTitle
                    }, u.label);
                    a.appendChild(f);
                    var l = u.children;
                    var c = createElement("ul");
                    for (var h = 0; h < l.length; h++) {
                        var p = createChild(l[h]);
                        c.appendChild(p)
                    }
                    a.appendChild(c)
                } else {
                    a = createChild(u)
                }
                i.appendChild(a)
            }
            r.appendChild(i);
            return r
        };
        var childHeight = function(e) {
            var t = getPostID("postChildID");
            if (e) {
                if (e == -1) {
                    $("#" + t).css({
                        height: "auto",
                        overflow: "auto"
                    })
                } else {
                    $("#" + t).css("height", e + "px")
                }
                return false
            }
            var n;
            if (getElement(element).options.length > settings.visibleRows) {
                var r = parseInt($("#" + t + " li:first").css("padding-bottom")) + parseInt($("#" + t + " li:first").css("padding-top"));
                if (settings.rowHeight === 0) {
                    $("#" + t).css({
                        visibility: "hidden",
                        display: "block"
                    });
                    settings.rowHeight = Math.round($("#" + t + " li:first").height());
                    $("#" + t).css({
                        visibility: "visible"
                    });
                    if (!isList || settings.enableCheckbox === true) {
                        $("#" + t).css({
                            display: "none"
                        })
                    }
                }
                n = (settings.rowHeight + r) * settings.visibleRows
            } else if (isList) {
                n = $("#" + element).height()
            }
            return n
        };
        var applyChildEvents = function() {
            var e = getPostID("postChildID");
            $("#" + e).on("click", function(e) {
                if (isDisabled === true) return false;
                e.preventDefault();
                e.stopPropagation();
                if (isList) {
                    bind_on_events()
                }
            });
            $("#" + e + " li." + css.enabled).on("click", function(e) {
                if (e.target.nodeName.toLowerCase() !== "input") {
                    close(this)
                }
            });
            $("#" + e + " li." + css.enabled).on("mousedown", function(t) {
                if (isDisabled === true) return false;
                oldSelected = $("#" + e + " li." + css.selected);
                lastTarget = this;
                t.preventDefault();
                t.stopPropagation();
                if (settings.enableCheckbox === true) {
                    if (t.target.nodeName.toLowerCase() === "input") {
                        controlHolded = true
                    }
                }
                if (isList === true) {
                    if (isMultiple) {
                        if (shiftHolded === true) {
                            $(this).addClass(css.selected);
                            var n = $("#" + e + " li." + css.selected);
                            var r = getIndex(this);
                            if (n.length > 1) {
                                var i = $("#" + e + " li." + css_i.li);
                                var s = getIndex(n[0]);
                                var o = getIndex(n[1]);
                                if (r > o) {
                                    s = r;
                                    o = o + 1
                                }
                                for (var u = Math.min(s, o); u <= Math.max(s, o); u++) {
                                    var a = i[u];
                                    if ($(a).hasClass(css.enabled)) {
                                        $(a).addClass(css.selected)
                                    }
                                }
                            }
                        } else if (controlHolded === true) {
                            $(this).toggleClass(css.selected);
                            if (settings.enableCheckbox === true) {
                                var f = this.childNodes[0];
                                f.checked = !f.checked
                            }
                        } else {
                            $("#" + e + " li." + css.selected).removeClass(css.selected);
                            $("#" + e + " input:checkbox").prop("checked", false);
                            $(this).addClass(css.selected);
                            if (settings.enableCheckbox === true) {
                                this.childNodes[0].checked = true
                            }
                        }
                    } else {
                        $("#" + e + " li." + css.selected).removeClass(css.selected);
                        $(this).addClass(css.selected)
                    }
                } else {
                    $("#" + e + " li." + css.selected).removeClass(css.selected);
                    $(this).addClass(css.selected)
                }
            });
            $("#" + e + " li." + css.enabled).on("mouseenter", function(e) {
                if (isDisabled === true) return false;
                e.preventDefault();
                e.stopPropagation();
                if (lastTarget != null) {
                    if (isMultiple) {
                        $(this).addClass(css.selected);
                        if (settings.enableCheckbox === true) {
                            this.childNodes[0].checked = true
                        }
                    }
                }
            });
            $("#" + e + " li." + css.enabled).on("mouseover", function(e) {
                if (isDisabled === true) return false;
                $(this).addClass(css.hover)
            });
            $("#" + e + " li." + css.enabled).on("mouseout", function(t) {
                if (isDisabled === true) return false;
                $("#" + e + " li." + css.hover).removeClass(css.hover)
            });
            $("#" + e + " li." + css.enabled).on("mouseup", function(t) {
                if (isDisabled === true) return false;
                t.preventDefault();
                t.stopPropagation();
                if (settings.enableCheckbox === true) {
                    controlHolded = false
                }
                var n = $("#" + e + " li." + css.selected).length;
                forcedTrigger = oldSelected.length != n || n == 0 ? true : false;
                fireAfterItemClicked();
                unbind_on_events();
                bind_on_events();
                lastTarget = null
            });
            if (settings.disabledOptionEvents == false) {
                $("#" + e + " li." + css_i.li).on("click", function(e) {
                    if (isDisabled === true) return false;
                    fireOptionEventIfExist(this, "click")
                });
                $("#" + e + " li." + css_i.li).on("mouseenter", function(e) {
                    if (isDisabled === true) return false;
                    fireOptionEventIfExist(this, "mouseenter")
                });
                $("#" + e + " li." + css_i.li).on("mouseover", function(e) {
                    if (isDisabled === true) return false;
                    fireOptionEventIfExist(this, "mouseover")
                });
                $("#" + e + " li." + css_i.li).on("mouseout", function(e) {
                    if (isDisabled === true) return false;
                    fireOptionEventIfExist(this, "mouseout")
                });
                $("#" + e + " li." + css_i.li).on("mousedown", function(e) {
                    if (isDisabled === true) return false;
                    fireOptionEventIfExist(this, "mousedown")
                });
                $("#" + e + " li." + css_i.li).on("mouseup", function(e) {
                    if (isDisabled === true) return false;
                    fireOptionEventIfExist(this, "mouseup")
                })
            }
        };
        var removeChildEvents = function() {
            var e = getPostID("postChildID");
            $("#" + e).off("click");
            $("#" + e + " li." + css.enabled).off("mouseenter");
            $("#" + e + " li." + css.enabled).off("click");
            $("#" + e + " li." + css.enabled).off("mouseover");
            $("#" + e + " li." + css.enabled).off("mouseout");
            $("#" + e + " li." + css.enabled).off("mousedown");
            $("#" + e + " li." + css.enabled).off("mouseup")
        };
        var triggerBypassingHandler = function(e, t, n) {
            $("#" + e).off(t, n);
            $("#" + e).trigger(t);
            $("#" + e).on(t, n)
        };
        var applyEvents = function() {
            var e = getPostID("postID");
            var t = getPostID("postTitleTextID");
            var n = getPostID("postChildID");
            $("#" + e).on(settings.event, function(e) {
                if (isDisabled === true) return false;
                fireEventIfExist(settings.event);
                e.preventDefault();
                e.stopPropagation();
                open(e)
            });
            $("#" + e).on("keydown", function(e) {
                var t = e.which;
                if (!isOpen && (t == ENTER || t == UP_ARROW || t == DOWN_ARROW || t == LEFT_ARROW || t == RIGHT_ARROW || t >= ALPHABETS_START && !isList)) {
                    open(e);
                    if (t >= ALPHABETS_START) {
                        showFilterBox()
                    } else {
                        e.preventDefault();
                        e.stopImmediatePropagation()
                    }
                }
            });
            $("#" + e).on("focus", wrapperFocusHandler);
            $("#" + e).on("blur", wrapperBlurHandler);
            $("#" + t).on("blur", function(t) {
                triggerBypassingHandler(e, "focus", wrapperFocusHandler)
            });
            applyChildEvents();
            $("#" + e).on("dblclick", on_dblclick);
            $("#" + e).on("mousemove", on_mousemove);
            $("#" + e).on("mouseenter", on_mouseover);
            $("#" + e).on("mouseleave", on_mouseout);
            $("#" + e).on("mousedown", on_mousedown);
            $("#" + e).on("mouseup", on_mouseup)
        };
        var wrapperFocusHandler = function(e) {
            fireEventIfExist("focus")
        };
        var wrapperBlurHandler = function(e) {
            fireEventIfExist("blur")
        };
        var fixedForList = function() {
            var e = getPostID("postID");
            var t = getPostID("postChildID");
            if (isList === true && settings.enableCheckbox === false) {
                $("#" + e + " ." + css.ddTitle).hide();
                $("#" + t).css({
                    display: "block",
                    position: "relative"
                })
            } else {
                if (settings.enableCheckbox === false) {
                    isMultiple = false
                }
                $("#" + e + " ." + css.ddTitle).show();
                $("#" + t).css({
                    display: "none",
                    position: settings.direction
                });
                var n = $("#" + t + " li." + css.selected)[0];
                $("#" + t + " li." + css.selected).removeClass(css.selected);
                var r = getIndex($(n).addClass(css.selected));
                setValue(r)
            }
            childHeight(childHeight())
        };
        var fixedForDisabled = function() {
            var e = getPostID("postID");
            var t = isDisabled == true ? settings.disabledOpacity : 1;
            if (isDisabled === true) {
                $("#" + e).addClass(css.disabledAll)
            } else {
                $("#" + e).removeClass(css.disabledAll)
            }
        };
        var fixedSomeUI = function() {
            var e = getPostID("postTitleTextID");
            if (settings.enableAutoFilter == "true") {
                $("#" + e).on("keyup", applyFilters)
            }
            fixedForList();
            fixedForDisabled()
        };
        var createLayout = function() {
            var e = createWrapper();
            var t = createTitle();
            e.appendChild(t);
            var n = createFilterBox();
            e.appendChild(n);
            var r = createChildren();
            e.appendChild(r);
            $("#" + element).after(e);
            hideOriginal();
            fixedSomeUI();
            applyEvents();
            var i = getPostID("postChildID");
            if (settings.append != "") {
                $("#" + i).append(settings.append)
            }
            if (settings.prepend != "") {
                $("#" + i).prepend(settings.prepend)
            }
            if (typeof settings.on.create == "function") {
                settings.on.create.apply($this, arguments)
            }
        };
        var selectMutipleOptions = function(e) {
            var t = getPostID("postChildID");
            var n = e || $("#" + t + " li." + css.selected);
            for (var r = 0; r < n.length; r++) {
                var i = getIndex(n[r]);
                getElement(element).options[i].selected = "selected"
            }
            setValue(n)
        };
        var fireAfterItemClicked = function() {
            var e = getPostID("postChildID");
            var t = $("#" + e + " li." + css.selected);
            if (isMultiple && (shiftHolded || controlHolded) || forcedTrigger) {
                getElement(element).selectedIndex = -1
            }
            var n;
            if (t.length == 0) {
                n = -1
            } else if (t.length > 1) {
                selectMutipleOptions(t)
            } else {
                n = getIndex($("#" + e + " li." + css.selected))
            } if ((getElement(element).selectedIndex != n || forcedTrigger) && t.length <= 1) {
                forcedTrigger = false;
                var r = has_handler("change");
                getElement(element).selectedIndex = n;
                setValue(n);
                if (typeof settings.on.change == "function") {
                    var i = getDataAndUI();
                    settings.on.change(i.data, i.ui)
                }
                $("#" + element).trigger("change")
            }
        };
        var setValue = function(e, t) {
            if (e !== undefined) {
                var n, r, i;
                if (e == -1) {
                    n = -1;
                    r = "";
                    i = "";
                    updateTitleUI(-1)
                } else {
                    if (typeof e != "object") {
                        var s = getElement(element).options[e];
                        getElement(element).selectedIndex = e;
                        n = e;
                        r = parseOption(s);
                        i = e >= 0 ? getElement(element).options[e].text : "";
                        updateTitleUI(undefined, r);
                        r = r.value
                    } else {
                        n = t && t.index || getElement(element).selectedIndex;
                        r = t && t.value || getElement(element).value;
                        i = t && t.text || getElement(element).options[getElement(element).selectedIndex].text || "";
                        updateTitleUI(n)
                    }
                }
                updateProp("selectedIndex", n);
                updateProp("value", r);
                updateProp("selectedText", i);
                updateProp("children", getElement(element).children);
                updateProp("uiData", getDataAndUI());
                updateProp("selectedOptions", $("#" + element + " option:selected"))
            }
        };
        var has_handler = function(e) {
            var t = {
                byElement: false,
                byJQuery: false,
                hasEvent: false
            };
            var n = $("#" + element);
            try {
                if (n.prop("on" + e) !== null) {
                    t.hasEvent = true;
                    t.byElement = true
                }
            } catch (r) {}
            var i;
            if (typeof $._data == "function") {
                i = $._data(n[0], "events")
            } else {
                i = n.data("events")
            } if (i && i[e]) {
                t.hasEvent = true;
                t.byJQuery = true
            }
            return t
        };
        var bind_on_events = function() {
            unbind_on_events();
            $("body").on("click", close);
            $(document).on("keydown", on_keydown);
            $(document).on("keyup", on_keyup)
        };
        var unbind_on_events = function() {
            $("body").off("click", close);
            $(document).off("keydown", on_keydown);
            $(document).off("keyup", on_keyup)
        };
        var applyFilters = function(e) {
            if (e.keyCode < ALPHABETS_START && e.keyCode != BACKSPACE && e.keyCode != DELETE) {
                return false
            }
            var t = getPostID("postChildID");
            var n = getPostID("postTitleTextID");
            var r = getElement(n).value;
            if (r.length == 0) {
                $("#" + t + " li:hidden").show();
                childHeight(childHeight())
            } else {
                $("#" + t + " li").hide();
                var i = $("#" + t + " li:Contains('" + r + "')").show();
                if ($("#" + t + " li:visible").length <= settings.visibleRows) {
                    childHeight(-1)
                }
                if (i.length > 0 && !isList || !isMultiple) {
                    $("#" + t + " ." + css.selected).removeClass(css.selected);
                    $(i[0]).addClass(css.selected)
                }
            } if (!isList) {
                adjustOpen()
            }
        };
        var showFilterBox = function() {
            if (settings.enableAutoFilter == "true") {
                var e = getPostID("postID");
                var t = getPostID("postTitleTextID");
                if ($("#" + t + ":hidden").length > 0 && controlHolded == false) {
                    $("#" + t + ":hidden").show().val("");
                    triggerBypassingHandler(e, "blur", wrapperBlurHandler);
                    getElement(t).focus()
                }
            }
        };
        var hideFilterBox = function() {
            var e = getPostID("postTitleTextID");
            if ($("#" + e + ":visible").length > 0) {
                $("#" + e + ":visible").hide();
                getElement(e).blur()
            }
        };
        var on_keydown = function(e) {
            var t = getPostID("postTitleTextID");
            var n = getPostID("postChildID");
            switch (e.keyCode) {
                case DOWN_ARROW:
                case RIGHT_ARROW:
                    e.preventDefault();
                    e.stopPropagation();
                    next();
                    break;
                case UP_ARROW:
                case LEFT_ARROW:
                    e.preventDefault();
                    e.stopPropagation();
                    previous();
                    break;
                case ESCAPE:
                case ENTER:
                    e.preventDefault();
                    e.stopPropagation();
                    close();
                    var r = $("#" + n + " li." + css.selected).length;
                    forcedTrigger = oldSelected.length != r || r == 0 ? true : false;
                    fireAfterItemClicked();
                    unbind_on_events();
                    lastTarget = null;
                    break;
                case SHIFT:
                    shiftHolded = true;
                    break;
                case CONTROL:
                    controlHolded = true;
                    break;
                default:
                    if (e.keyCode >= ALPHABETS_START && isList === false) {
                        showFilterBox()
                    }
                    break
            }
            if (isDisabled === true) return false;
            fireEventIfExist("keydown")
        };
        var on_keyup = function(e) {
            switch (e.keyCode) {
                case SHIFT:
                    shiftHolded = false;
                    break;
                case CONTROL:
                    controlHolded = false;
                    break
            }
            if (isDisabled === true) return false;
            fireEventIfExist("keyup")
        };
        var on_dblclick = function(e) {
            if (isDisabled === true) return false;
            fireEventIfExist("dblclick")
        };
        var on_mousemove = function(e) {
            if (isDisabled === true) return false;
            fireEventIfExist("mousemove")
        };
        var on_mouseover = function(e) {
            if (isDisabled === true) return false;
            e.preventDefault();
            fireEventIfExist("mouseover")
        };
        var on_mouseout = function(e) {
            if (isDisabled === true) return false;
            e.preventDefault();
            fireEventIfExist("mouseout")
        };
        var on_mousedown = function(e) {
            if (isDisabled === true) return false;
            fireEventIfExist("mousedown")
        };
        var on_mouseup = function(e) {
            if (isDisabled === true) return false;
            fireEventIfExist("mouseup")
        };
        var option_has_handler = function(e, t) {
            var n = {
                byElement: false,
                byJQuery: false,
                hasEvent: false
            };
            if ($(e).prop("on" + t) != undefined) {
                n.hasEvent = true;
                n.byElement = true
            }
            var r = $(e).data("events");
            if (r && r[t]) {
                n.hasEvent = true;
                n.byJQuery = true
            }
            return n
        };
        var fireOptionEventIfExist = function(e, t) {
            if (settings.disabledOptionEvents == false) {
                var n = getElement(element).options[getIndex(e)];
                if (option_has_handler(n, t).hasEvent === true) {
                    if (option_has_handler(n, t).byElement === true) {
                        n["on" + t]()
                    }
                    if (option_has_handler(n, t).byJQuery === true) {
                        switch (t) {
                            case "keydown":
                            case "keyup":
                                break;
                            default:
                                $(n).trigger(t);
                                break
                        }
                    }
                    return false
                }
            }
        };
        var fireEventIfExist = function(e) {
            if (typeof settings.on[e] == "function") {
                settings.on[e].apply(this, arguments)
            }
            if (has_handler(e).hasEvent === true) {
                if (has_handler(e).byElement === true) {
                    getElement(element)["on" + e]()
                } else if (has_handler(e).byJQuery === true) {
                    switch (e) {
                        case "keydown":
                        case "keyup":
                            break;
                        default:
                            $("#" + element).triggerHandler(e);
                            break
                    }
                }
                return false
            }
        };
        var scrollToIfNeeded = function(e) {
            var t = getPostID("postChildID");
            e = e !== undefined ? e : $("#" + t + " li." + css.selected);
            if (e.length > 0) {
                var n = parseInt($(e).position().top);
                var r = parseInt($("#" + t).height());
                if (n > r) {
                    var i = n + $("#" + t).scrollTop() - r / 2;
                    $("#" + t).animate({
                        scrollTop: i
                    }, 500)
                }
            }
        };
        var next = function() {
            function i(e) {
                e = e + 1;
                if (e > t.length) {
                    return e
                }
                if ($(t[e]).hasClass(css.enabled) === true) {
                    return e
                }
                return e = i(e)
            }
            var e = getPostID("postChildID");
            var t = $("#" + e + " li:visible." + css_i.li);
            var n = $("#" + e + " li:visible." + css.selected);
            n = n.length == 0 ? t[0] : n;
            var r = $("#" + e + " li:visible." + css_i.li).index(n);
            if (r < t.length - 1) {
                r = i(r);
                if (r < t.length) {
                    if (!shiftHolded || !isList || !isMultiple) {
                        $("#" + e + " ." + css.selected).removeClass(css.selected)
                    }
                    $(t[r]).addClass(css.selected);
                    updateTitleUI(r);
                    if (isList == true) {
                        fireAfterItemClicked()
                    }
                    scrollToIfNeeded($(t[r]))
                }
                if (!isList) {
                    adjustOpen()
                }
            }
        };
        var previous = function() {
            function s(e) {
                e = e - 1;
                if (e < 0) {
                    return e
                }
                if ($(n[e]).hasClass(css.enabled) === true) {
                    return e
                }
                return e = s(e)
            }
            var e = getPostID("postChildID");
            var t = $("#" + e + " li:visible." + css.selected);
            var n = $("#" + e + " li:visible." + css_i.li);
            var r = $("#" + e + " li:visible." + css_i.li).index(t[0]);
            if (r >= 0) {
                r = s(r);
                if (r >= 0) {
                    if (!shiftHolded || !isList || !isMultiple) {
                        $("#" + e + " ." + css.selected).removeClass(css.selected)
                    }
                    $(n[r]).addClass(css.selected);
                    updateTitleUI(r);
                    if (isList == true) {
                        fireAfterItemClicked()
                    }
                    if (parseInt($(n[r]).position().top + $(n[r]).height()) <= 0) {
                        var i = $("#" + e).scrollTop() - $("#" + e).height() - $(n[r]).height();
                        $("#" + e).animate({
                            scrollTop: i
                        }, 500)
                    }
                }
                if (!isList) {
                    adjustOpen()
                }
            }
        };
        var adjustOpen = function() {
            var e = getPostID("postID");
            var t = getPostID("postChildID");
            var n = $("#" + e).offset();
            var r = $("#" + e).height();
            var i = $(window).height();
            var s = $(window).scrollTop();
            var o = $("#" + t).height();
            var u = $("#" + e).height();
            var a = settings.openDirection.toLowerCase();
            if ((i + s < Math.floor(o + r + n.top) || a == "alwaysup") && a != "alwaysdown") {
                u = o;
                $("#" + t).css({
                    top: "-" + u + "px",
                    display: "block",
                    zIndex: settings.zIndex
                });
                if (settings.roundedCorner == "true") {
                    $("#" + e).removeClass("borderRadius borderRadiusTp").addClass("borderRadiusBtm")
                }
                var u = $("#" + t).offset().top;
                if (u < -10) {
                    $("#" + t).css({
                        top: parseInt($("#" + t).css("top")) - u + 20 + s + "px",
                        zIndex: settings.zIndex
                    });
                    if (settings.roundedCorner == "true") {
                        $("#" + e).removeClass("borderRadiusBtm borderRadiusTp").addClass("borderRadius")
                    }
                }
            } else {
                $("#" + t).css({
                    top: u + "px",
                    zIndex: settings.zIndex
                });
                if (settings.roundedCorner == "true") {
                    $("#" + e).removeClass("borderRadius borderRadiusBtm").addClass("borderRadiusTp")
                }
            } if (isIE) {
                if (msieversion() <= 7) {
                    $("div.ddcommon").css("zIndex", settings.zIndex - 10);
                    $("#" + e).css("zIndex", settings.zIndex + 5)
                }
            }
        };
        var open = function(e) {
            if (isDisabled === true) return false;
            var t = getPostID("postID");
            var n = getPostID("postChildID");
            if (!isOpen) {
                isOpen = true;
                if (msBeautify.oldDiv != "") {
                    $("#" + msBeautify.oldDiv).css({
                        display: "none"
                    })
                }
                msBeautify.oldDiv = n;
                $("#" + n + " li:hidden").show();
                adjustOpen();
                var r = settings.animStyle;
                if (r == "" || r == "none") {
                    $("#" + n).css({
                        display: "block"
                    });
                    scrollToIfNeeded();
                    if (typeof settings.on.open == "function") {
                        var i = getDataAndUI();
                        settings.on.open(i.data, i.ui)
                    }
                } else {
                    $("#" + n)[r]("fast", function() {
                        scrollToIfNeeded();
                        if (typeof settings.on.open == "function") {
                            var e = getDataAndUI();
                            settings.on.open(e.data, e.ui)
                        }
                    })
                }
                bind_on_events()
            } else {
                if (settings.event !== "mouseover") {
                    close()
                }
            }
        };
        var close = function(e) {
            isOpen = false;
            var t = getPostID("postID");
            var n = getPostID("postChildID");
            if (isList === false || settings.enableCheckbox === true) {
                $("#" + n).css({
                    display: "none"
                });
                if (settings.roundedCorner == "true") {
                    $("#" + t).removeClass("borderRadiusTp borderRadiusBtm").addClass("borderRadius")
                }
            }
            unbind_on_events();
            if (typeof settings.on.close == "function") {
                var r = getDataAndUI();
                settings.on.close(r.data, r.ui)
            }
            hideFilterBox();
            childHeight(childHeight());
            $("#" + n).css({
                zIndex: 1
            });
            updateTitleUI(getElement(element).selectedIndex)
        };
        var mergeAllProp = function() {
            try {
                orginial = $.extend(true, {}, getElement(element));
                for (var e in orginial) {
                    if (typeof orginial[e] != "function") {
                        $this[e] = orginial[e]
                    }
                }
            } catch (t) {}
            $this.selectedText = getElement(element).selectedIndex >= 0 ? getElement(element).options[getElement(element).selectedIndex].text : "";
            $this.version = msBeautify.version.msDropdown;
            $this.author = msBeautify.author
        };
        var getDataAndUIByOption = function(e) {
            if (e != null && typeof e != "undefined") {
                var t = getPostID("postChildID");
                var n = parseOption(e);
                var r = $("#" + t + " li." + css_i.li + ":eq(" + e.index + ")");
                return {
                    data: n,
                    ui: r,
                    option: e,
                    index: e.index
                }
            }
            return null
        };
        var getDataAndUI = function() {
            var e = getPostID("postChildID");
            var t = getElement(element);
            var n, r, i, s;
            if (t.selectedIndex == -1) {
                n = null;
                r = null;
                i = null;
                s = -1
            } else {
                r = $("#" + e + " li." + css.selected);
                if (r.length > 1) {
                    var o = [],
                        u = [],
                        a = [];
                    for (var f = 0; f < r.length; f++) {
                        var l = getIndex(r[f]);
                        o.push(l);
                        u.push(t.options[l])
                    }
                    n = o;
                    i = u;
                    s = o
                } else {
                    i = t.options[t.selectedIndex];
                    n = parseOption(i);
                    s = t.selectedIndex
                }
            }
            return {
                data: n,
                ui: r,
                index: s,
                option: i
            }
        };
        var updateTitleUI = function(e, t) {
            var n = getPostID("postTitleID");
            var r = {};
            if (e == -1) {
                r.text = "&nbsp;";
                r.className = "";
                r.description = "";
                r.image = ""
            } else if (typeof e != "undefined") {
                var i = getElement(element).options[e];
                r = parseOption(i)
            } else {
                r = t
            }
            $("#" + n).find("." + css.label).html(r.text);
            getElement(n).className = css.ddTitleText + " " + r.className;
            if (r.description != "") {
                $("#" + n).find("." + css.description).html(r.description).show()
            } else {
                $("#" + n).find("." + css.description).html("").hide()
            }
            var s = $("#" + n).find("img");
            if (s.length > 0) {
                $(s).remove()
            }
            if (r.image != "" && settings.showIcon) {
                s = createElement("img", {
                    src: r.image
                });
                $("#" + n).prepend(s);
                if (r.imagecss != "") {
                    s.className = r.imagecss + " "
                }
                if (r.description == "") {
                    s.className = s.className + css_i.fnone
                }
            }
        };
        var updateProp = function(e, t) {
            $this[e] = t
        };
        var updateUI = function(e, t, n) {
            var r = getPostID("postChildID");
            var i = false;
            switch (e) {
                case "add":
                    var s = createChild(t || getElement(element).options[n]);
                    var o;
                    if (arguments.length == 3) {
                        o = n
                    } else {
                        o = $("#" + r + " li." + css_i.li).length - 1
                    } if (o < 0 || !o) {
                        $("#" + r + " ul").append(s)
                    } else {
                        var u = $("#" + r + " li." + css_i.li)[o];
                        $(u).before(s)
                    }
                    removeChildEvents();
                    applyChildEvents();
                    if (settings.on.add != null) {
                        settings.on.add.apply(this, arguments)
                    }
                    break;
                case "remove":
                    i = $($("#" + r + " li." + css_i.li)[n]).hasClass(css.selected);
                    $("#" + r + " li." + css_i.li + ":eq(" + n + ")").remove();
                    var a = $("#" + r + " li." + css.enabled);
                    if (i == true) {
                        if (a.length > 0) {
                            $(a[0]).addClass(css.selected);
                            var f = $("#" + r + " li." + css_i.li).index(a[0]);
                            setValue(f)
                        }
                    }
                    if (a.length == 0) {
                        setValue(-1)
                    }
                    if ($("#" + r + " li." + css_i.li).length < settings.visibleRows && !isList) {
                        childHeight(-1)
                    }
                    if (settings.on.remove != null) {
                        settings.on.remove.apply(this, arguments)
                    }
                    break
            }
        };
        this.act = function() {
            var e = arguments[0];
            Array.prototype.shift.call(arguments);
            switch (e) {
                case "add":
                    $this.add.apply(this, arguments);
                    break;
                case "remove":
                    $this.remove.apply(this, arguments);
                    break;
                default:
                    try {
                        getElement(element)[e].apply(getElement(element), arguments)
                    } catch (t) {}
                    break
            }
        };
        this.add = function() {
            var e, t, n, r, i;
            var s = arguments[0];
            if (typeof s == "string") {
                e = s;
                t = e;
                opt = new Option(e, t)
            } else {
                e = s.text || "";
                t = s.value || e;
                n = s.title || "";
                r = s.image || "";
                i = s.description || "";
                opt = new Option(e, t);
                $(opt).data("description", i);
                $(opt).data("image", r);
                $(opt).data("title", n)
            }
            arguments[0] = opt;
            getElement(element).add.apply(getElement(element), arguments);
            updateProp("children", getElement(element)["children"]);
            updateProp("length", getElement(element).length);
            updateUI("add", opt, arguments[1])
        };
        this.remove = function(e) {
            getElement(element).remove(e);
            updateProp("children", getElement(element)["children"]);
            updateProp("length", getElement(element).length);
            updateUI("remove", undefined, e)
        };
        this.set = function(e, t) {
            if (typeof e == "undefined" || typeof t == "undefined") return false;
            e = e.toString();
            try {
                updateProp(e, t)
            } catch (n) {}
            switch (e) {
                case "size":
                    getElement(element)[e] = t;
                    if (t == 0) {
                        getElement(element).multiple = false
                    }
                    isList = getElement(element).size > 1 || getElement(element).multiple == true ? true : false;
                    fixedForList();
                    break;
                case "multiple":
                    getElement(element)[e] = t;
                    isList = getElement(element).size > 1 || getElement(element).multiple == true ? true : false;
                    isMultiple = getElement(element).multiple;
                    fixedForList();
                    updateProp(e, t);
                    break;
                case "disabled":
                    getElement(element)[e] = t;
                    isDisabled = t;
                    fixedForDisabled();
                    break;
                case "selectedIndex":
                case "value":
                    getElement(element)[e] = t;
                    var r = getPostID("postChildID");
                    $("#" + r + " li." + css_i.li).removeClass(css.selected);
                    $($("#" + r + " li." + css_i.li)[getElement(element).selectedIndex]).addClass(css.selected);
                    setValue(getElement(element).selectedIndex);
                    break;
                case "length":
                    var r = getPostID("postChildID");
                    if (t < getElement(element).length) {
                        getElement(element)[e] = t;
                        if (t == 0) {
                            $("#" + r + " li." + css_i.li).remove();
                            setValue(-1)
                        } else {
                            $("#" + r + " li." + css_i.li + ":gt(" + (t - 1) + ")").remove();
                            if ($("#" + r + " li." + css.selected).length == 0) {
                                $("#" + r + " li." + css.enabled + ":eq(0)").addClass(css.selected)
                            }
                        }
                        updateProp(e, t);
                        updateProp("children", getElement(element)["children"])
                    }
                    break;
                case "id":
                    break;
                default:
                    try {
                        getElement(element)[e] = t;
                        updateProp(e, t)
                    } catch (n) {}
                    break
            }
        };
        this.get = function(e) {
            return $this[e] || getElement(element)[e]
        };
        this.visible = function(e) {
            var t = getPostID("postID");
            if (e === true) {
                $("#" + t).show()
            } else if (e === false) {
                $("#" + t).hide()
            } else {
                return $("#" + t).css("display") == "none" ? false : true
            }
        };
        this.debug = function(e) {
            msBeautify.debug(e)
        };
        this.close = function() {
            close()
        };
        this.open = function() {
            open()
        };
        this.showRows = function(e) {
            if (typeof e == "undefined" || e == 0) {
                return false
            }
            settings.visibleRows = e;
            childHeight(childHeight())
        };
        this.visibleRows = this.showRows;
        this.on = function(e, t) {
            $("#" + element).on(e, t)
        };
        this.off = function(e, t) {
            $("#" + element).off(e, t)
        };
        this.addMyEvent = this.on;
        this.getData = function() {
            return getDataAndUI()
        };
        this.namedItem = function() {
            var e = getElement(element).namedItem.apply(getElement(element), arguments);
            return getDataAndUIByOption(e)
        };
        this.item = function() {
            var e = getElement(element).item.apply(getElement(element), arguments);
            return getDataAndUIByOption(e)
        };
        this.setIndexByValue = function(e) {
            this.set("value", e)
        };
        this.destroy = function() {
            var e = getPostID("postElementHolder");
            var t = getPostID("postID");
            $("#" + t + ", #" + t + " *").off();
            getElement(element).tabIndex = getElement(t).tabIndex;
            $("#" + t).remove();
            $("#" + element).parent().replaceWith($("#" + element));
            $("#" + element).data("dd", null)
        };
        this.refresh = function() {
            setValue(getElement(element).selectedIndex)
        };
        init()
    }
    msBeautify = {
        version: {
            msDropdown: "3.5"
        },
        author: "Marghoob Suleman",
        counter: 20,
        debug: function(e) {
            if (e !== false) {
                $(".ddOutOfVision").css({
                    height: "auto",
                    position: "relative"
                })
            } else {
                $(".ddOutOfVision").css({
                    height: "0px",
                    position: "absolute"
                })
            }
        },
        oldDiv: "",
        create: function(e, t, n) {
            n = n || "dropdown";
            var r;
            switch (n.toLowerCase()) {
                case "dropdown":
                case "select":
                    r = $(e).msDropdown(t).data("dd");
                    break
            }
            return r
        }
    };
    $.msDropDown = {};
    $.msDropdown = {};
    $.extend(true, $.msDropDown, msBeautify);
    $.extend(true, $.msDropdown, msBeautify);
    if ($.fn.prop === undefined) {
        $.fn.prop = $.fn.attr
    }
    if ($.fn.on === undefined) {
        $.fn.on = $.fn.bind;
        $.fn.off = $.fn.unbind
    }
    if (typeof $.expr.createPseudo === "function") {
        $.expr[":"].Contains = $.expr.createPseudo(function(e) {
            return function(t) {
                return $(t).text().toUpperCase().indexOf(e.toUpperCase()) >= 0
            }
        })
    } else {
        $.expr[":"].Contains = function(e, t, n) {
            return $(e).text().toUpperCase().indexOf(n[3].toUpperCase()) >= 0
        }
    }
    $.fn.extend({
        msDropDown: function(e) {
            return this.each(function() {
                if (!$(this).data("dd")) {
                    var t = new dd(this, e);
                    $(this).data("dd", t)
                }
            })
        }
    });
    $.fn.msDropdown = $.fn.msDropDown
})(jQuery)